package org.ethworks.generated;

import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.exceptions.TransactionException;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version null.
 */
public class SQLStorage extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b610b808061001e6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632fe99bdc14610067578063933ad2f71461014a5780639647d74a1461026c578063fc8b4adf14610299575b600080fd5b341561007257600080fd5b610148600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610339565b005b341561015557600080fd5b6101f1600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919050506105f5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610231578082015181840152602081019050610216565b50505050905090810190601f16801561025e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027757600080fd5b61027f610784565b604051808215151515815260200191505060405180910390f35b34156102a457600080fd5b610337600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061078d565b005b60006007846040518082805190602001908083835b602083101515610373578051825260208201915060208101905060208303925061034e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020836040518082805190602001908083835b6020831015156103dc57805182526020820191506020810190506020830392506103b7565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050816006856040518082805190602001908083835b60208310151561044b5780518252602082019150602081019050602083039250610426565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020846040518082805190602001908083835b6020831015156104b4578051825260208201915060208101905060208303925061048f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000838152602001908152602001600020908051906020019061050b929190610a87565b5060016007856040518082805190602001908083835b6020831015156105465780518252602082019150602081019050602083039250610521565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020846040518082805190602001908083835b6020831015156105af578051825260208201915060208101905060208303925061058a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000828254019250508190555050505050565b6105fd610b07565b6006846040518082805190602001908083835b6020831015156106355780518252602082019150602081019050602083039250610610565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020836040518082805190602001908083835b60208310151561069e5780518252602082019150602081019050602083039250610679565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b505050505090509392505050565b60006001905090565b600080600061079a610b07565b85600160008054815260200190815260200160002090805190602001906107c2929190610a87565b50600160008082825401925050819055508451935060009250602091505b8382101561097c576107f3858484610984565b9050602083019250806003876040518082805190602001908083835b602083101515610834578051825260208201915060208101905060208303925061080f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006002896040518082805190602001908083835b6020831015156108a1578051825260208201915060208101905060208303925061087c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054815260200190815260200160002090805190602001906108f6929190610a87565b5060016002876040518082805190602001908083835b602083101515610931578051825260208201915060208101905060208303925061090c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600082825401925050819055506020820191506107e0565b505050505050565b61098c610b07565b610994610b1b565b61099c610b1b565b60008692508585036040518059106109b15750595b9080825280601f01601f191660200182016040525091508590505b84811015610a7a5782818151811015156109e257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282878303815181101515610a3d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506109cc565b8193505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ac857805160ff1916838001178555610af6565b82800160010185558215610af6579182015b82811115610af5578251825591602001919060010190610ada565b5b509050610b039190610b2f565b5090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b610b5191905b80821115610b4d576000816000905550600101610b35565b5090565b905600a165627a7a7230582029b31931eb8e8fb69a60eea891d0d7ef7677c4829fb860455f7e28c9a5cfb4db0029";

    protected SQLStorage(String contractAddress, Web3j web3j, Credentials accountCredentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, accountCredentials, gasPrice, gasLimit);
        try {
                    send(null, BINARY, BigInteger.ZERO, gasPrice, gasLimit);
                } catch (IOException | TransactionException e) {
                    e.printStackTrace();
                }
    }

    protected SQLStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
        try {
                    send(null, BINARY, BigInteger.ZERO, gasPrice, gasLimit);
                } catch (IOException | TransactionException e) {
                    e.printStackTrace();
                }
    }

    public RemoteCall<TransactionReceipt> insert(String tableName, String column, String value) {
        Function function = new Function(
                "insert", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tableName), 
                new org.web3j.abi.datatypes.Utf8String(column), 
                new org.web3j.abi.datatypes.Utf8String(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getValue(String tableName, String column, BigInteger index) {
        Function function = new Function("getValue", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tableName), 
                new org.web3j.abi.datatypes.Utf8String(column), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> getTableExists() {
        Function function = new Function("getTableExists", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> createTable(String tableName, String columns) {
        Function function = new Function(
                "createTable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tableName), 
                new org.web3j.abi.datatypes.Utf8String(columns)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<SQLStorage> deploy(Web3j web3j, Credentials accountCredentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SQLStorage.class, web3j, accountCredentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SQLStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SQLStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static SQLStorage load(String contractAddress, Web3j web3j, Credentials accountCredentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SQLStorage(contractAddress, web3j, accountCredentials, gasPrice, gasLimit);
    }

    public static SQLStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SQLStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
